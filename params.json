{"name":"Jquery.mask","body":"# jQuery.mask\r\n\r\n## Mask any Element\r\n\r\nThis jQuery plugin masks and unmasks elements, so you can handle them without\r\nannoying user interaction taking place.\r\n\r\n## Installation\r\n\r\nPlace the jquery.mask.js file and the jquery.mask.css file on your server and\r\ninclude them:\r\n\r\n    <script src=\"/static/js/jquery.js\"></script>\r\n    <script src=\"/static/js/jquery.mask.js\"></script>\r\n    <link rel=\"stylesheet\" href=\"/static/css/jquery.mask.css\" />\r\n\r\nOptionally you can embed jquery.event.destroyed from the\r\n[jQuery++ project](http://jquerypp.com/). This automatically unmasks any\r\nelement, when it gets removed.\r\n\r\n## Usage\r\n\r\nLet's assume, you have a button, that should get masked on click and unmasked,\r\nafter the respective action has finished:\r\n\r\n    $button.on('click', function() {\r\n      $(this).mask();            // mask the element\r\n      // do the action here\r\n      $(this).unmask();          // remove the mask again\r\n    });\r\n\r\nIn real-life applications you will usually do the unmasking in a callback or\r\nsuccess/error handling function. You can mask the whole browser window, if any\r\nof `window`, `document`, `<body>` or `<html>` appear in the jQuery collection:\r\n\r\n    $(window).mask();            // produces the same result as\r\n    $('a').add(document).mask(); // or\r\n    $('body').mask();\r\n\r\nIf you want to access the mask element directly, you can use\r\n\r\n    $button.data('mask');\r\n\r\nWhen you want to check, if an element is masked, or filter all masked\r\nelements, you can do this as well:\r\n\r\n    $button.isMasked();          // check if the element is masked\r\n    $('button:masked');          // get all masked elements\r\n\r\nFinally, you can react on masking events:\r\n\r\n    $button.on('masked', function(event, mask) {\r\n        // paint the mask green when visible\r\n        mask.css('background', 'green');\r\n    });\r\n\r\n    $button.on('unmasked', function(event) {\r\n        alert('You have successfully unmasked the element.');\r\n    });\r\n\r\n## Options\r\n\r\nUse the following options to configure jQuery.mask:\r\n\r\n* `effect` - the effect function to display the mask. For no effect at all use\r\n  `function() { return this; }`\r\n* `addClass` - additional class to give to the masked target element.\r\n* `addMaskClass` - additional class to give to the mask.\r\n* `content` - content to place into the mask. The default is to keep the mask\r\n  empty.\r\n* `delay` - delay the display of the mask. This is useful, when the masking\r\n  action is usually short and you want to prevent a flicker in that case. When\r\n  `unmask` is called during that time, no mask will be shown.\r\n* `focusable` - whether the masked element can be accessed. The default is to\r\n  prevent this. When set to `true`, both keyboard and mouse access are\r\n  possible through the mask.\r\n* `callback` - a callback function that gets called after masking the element.\r\n  It gets the currently masked element (jQuery object) as `this` and the mask\r\n  itself (jQuery object) passed as argument.\r\n\r\n## License\r\n\r\nThe plugin is released under both the GPL and MIT License.\r\n\r\n## Author\r\n\r\nThe plugin was written by Manuel Strehl,\r\n[@m_strehl](http://twitter.com/m_strehl), and open-sourced by Port 8000 UG.\r\n\r\n","tagline":"Mask any element or the complete page","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}